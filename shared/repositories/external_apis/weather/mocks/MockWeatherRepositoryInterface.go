// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	weather "github.com/gerps2/desafio-cloud-run/shared/repositories/external_apis/weather"
	mock "github.com/stretchr/testify/mock"
)

// MockWeatherRepositoryInterface is an autogenerated mock type for the WeatherRepositoryInterface type
type MockWeatherRepositoryInterface struct {
	mock.Mock
}

type MockWeatherRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWeatherRepositoryInterface) EXPECT() *MockWeatherRepositoryInterface_Expecter {
	return &MockWeatherRepositoryInterface_Expecter{mock: &_m.Mock}
}

// GetWeather provides a mock function with given fields: ctx, city
func (_m *MockWeatherRepositoryInterface) GetWeather(ctx context.Context, city string) (*weather.WeatherResponse, error) {
	ret := _m.Called(ctx, city)

	if len(ret) == 0 {
		panic("no return value specified for GetWeather")
	}

	var r0 *weather.WeatherResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*weather.WeatherResponse, error)); ok {
		return rf(ctx, city)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *weather.WeatherResponse); ok {
		r0 = rf(ctx, city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*weather.WeatherResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWeatherRepositoryInterface_GetWeather_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWeather'
type MockWeatherRepositoryInterface_GetWeather_Call struct {
	*mock.Call
}

// GetWeather is a helper method to define mock.On call
//   - ctx context.Context
//   - city string
func (_e *MockWeatherRepositoryInterface_Expecter) GetWeather(ctx interface{}, city interface{}) *MockWeatherRepositoryInterface_GetWeather_Call {
	return &MockWeatherRepositoryInterface_GetWeather_Call{Call: _e.mock.On("GetWeather", ctx, city)}
}

func (_c *MockWeatherRepositoryInterface_GetWeather_Call) Run(run func(ctx context.Context, city string)) *MockWeatherRepositoryInterface_GetWeather_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWeatherRepositoryInterface_GetWeather_Call) Return(_a0 *weather.WeatherResponse, _a1 error) *MockWeatherRepositoryInterface_GetWeather_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWeatherRepositoryInterface_GetWeather_Call) RunAndReturn(run func(context.Context, string) (*weather.WeatherResponse, error)) *MockWeatherRepositoryInterface_GetWeather_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWeatherRepositoryInterface creates a new instance of MockWeatherRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeatherRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeatherRepositoryInterface {
	mock := &MockWeatherRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
