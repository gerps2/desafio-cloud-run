// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	valueObjects "github.com/gerps2/desafio-cloud-run/shared/domain/valueObjects"
	mock "github.com/stretchr/testify/mock"

	viacep "github.com/gerps2/desafio-cloud-run/shared/repositories/external_apis/viapcep"
)

// MockViaCepRepositoryInterface is an autogenerated mock type for the ViaCepRepositoryInterface type
type MockViaCepRepositoryInterface struct {
	mock.Mock
}

type MockViaCepRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockViaCepRepositoryInterface) EXPECT() *MockViaCepRepositoryInterface_Expecter {
	return &MockViaCepRepositoryInterface_Expecter{mock: &_m.Mock}
}

// GetAddress provides a mock function with given fields: ctx, cep
func (_m *MockViaCepRepositoryInterface) GetAddress(ctx context.Context, cep valueObjects.Cep) (*viacep.ViaCepResponse, error) {
	ret := _m.Called(ctx, cep)

	if len(ret) == 0 {
		panic("no return value specified for GetAddress")
	}

	var r0 *viacep.ViaCepResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, valueObjects.Cep) (*viacep.ViaCepResponse, error)); ok {
		return rf(ctx, cep)
	}
	if rf, ok := ret.Get(0).(func(context.Context, valueObjects.Cep) *viacep.ViaCepResponse); ok {
		r0 = rf(ctx, cep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*viacep.ViaCepResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, valueObjects.Cep) error); ok {
		r1 = rf(ctx, cep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockViaCepRepositoryInterface_GetAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddress'
type MockViaCepRepositoryInterface_GetAddress_Call struct {
	*mock.Call
}

// GetAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - cep valueObjects.Cep
func (_e *MockViaCepRepositoryInterface_Expecter) GetAddress(ctx interface{}, cep interface{}) *MockViaCepRepositoryInterface_GetAddress_Call {
	return &MockViaCepRepositoryInterface_GetAddress_Call{Call: _e.mock.On("GetAddress", ctx, cep)}
}

func (_c *MockViaCepRepositoryInterface_GetAddress_Call) Run(run func(ctx context.Context, cep valueObjects.Cep)) *MockViaCepRepositoryInterface_GetAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(valueObjects.Cep))
	})
	return _c
}

func (_c *MockViaCepRepositoryInterface_GetAddress_Call) Return(_a0 *viacep.ViaCepResponse, _a1 error) *MockViaCepRepositoryInterface_GetAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockViaCepRepositoryInterface_GetAddress_Call) RunAndReturn(run func(context.Context, valueObjects.Cep) (*viacep.ViaCepResponse, error)) *MockViaCepRepositoryInterface_GetAddress_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockViaCepRepositoryInterface creates a new instance of MockViaCepRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockViaCepRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockViaCepRepositoryInterface {
	mock := &MockViaCepRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
